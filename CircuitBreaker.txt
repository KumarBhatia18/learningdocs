CircuitBreaker (A software design pattern) helps to control the interaction among services by providing fault and latency tolerance. It improves overall resilience of the system by isolating the failing services and stopping the cascading effect of failures.

Netflix OSS suite has an offering for above pattern, named as Netflix Hystrix which for all practical purposes , have been embraced by communities outside of Netflix OSS with likes of Spring Cloud, microservices.io etc. We are also encouraged to use Hystrix as CircuitBreaker implementation given the tech stack we are surrounded with (Spring Cloud , Netflix Feign , Netflix Eureka etc,) .

How Does Hystrix Fit in EPST PCF Tech Stack?  
As stated above, Netflix Hystrix as a library is embraced by different software communities/organizations to promote circuit breaker solution, we however may have to set up a due diligence for its usability and need to ensure appropriate handling of configurations just to avoid any conflicts with similar configurations from other libraries. (Mostly time out conflict with rest client time out).  

How to enable circuit breaker?
In spring cloud based micro-services , below are the details to enable circuit breaker using Netflix Hystrix

Add following dependency in service's classpath. Please be mindful of dependency version. It should be compatible with Spring Boot's version.

A circuit breaker acts as a proxy for operations that might fail. The proxy should monitor the number of recent failures that have occurred, and use this information to decide whether to allow the operation to proceed, or simply return an exception immediately.

The proxy can be implemented as a state machine with the following states that mimic the functionality of an electrical circuit breaker:

Closed: The request from the application is routed to the operation. The proxy maintains a count of the number of recent failures, and if the call to the operation is unsuccessful the proxy increments this count. If the number of recent failures exceeds a specified threshold within a given time period, the proxy is placed into the Open state. At this point the proxy starts a timeout timer, and when this timer expires the proxy is placed into the Half-Open state.

The purpose of the timeout timer is to give the system time to fix the problem that caused the failure before allowing the application to try to perform the operation again.

Open: The request from the application fails immediately and an exception is returned to the application.

Half-Open: A limited number of requests from the application are allowed to pass through and invoke the operation. If these requests are successful, it's assumed that the fault that was previously causing the failure has been fixed and the circuit breaker switches to the Closed state (the failure counter is reset). If any request fails, the circuit breaker assumes that the fault is still present so it reverts back to the Open state and restarts the timeout timer to give the system a further period of time to recover from the failure.

Different States of the Circuit Breaker
The circuit breaker has three distinct states: Closed, Open, and Half-Open:

Closed – When everything is normal, the circuit breaker remains in the closed state and all calls pass through to the services. When the number of failures exceeds a predetermined threshold the breaker trips, and it goes into the Open state.
Open – The circuit breaker returns an error for calls without executing the function.
Half-Open – After a timeout period, the circuit switches to a half-open state to test if the underlying problem still exists. If a single call fails in this half-open state, the breaker is once again tripped. If it succeeds, the circuit breaker resets back to the normal, closed state. 




feign.hystrix.enabled=true
hystrix.command.default.execution.timeout.enabled=true
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=12000
hystrix.command.default.execution.circuitBreaker.requestVolumeThreshold=3

